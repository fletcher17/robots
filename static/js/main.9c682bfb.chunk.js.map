{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","cardComponent","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBondary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterCardList","filter","toLowerCase","includes","length","ErrorBoundary","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"4RAgBeA,G,MAbF,SAACC,GACZ,OACC,yBAAKC,UAAU,uDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACtB,6BACC,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCMAC,EAXE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACbC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACvC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAII,EAAOI,GAAGR,GAAIC,KAAMG,EAAOI,GAAGP,KAAMC,MAAOE,EAAOI,GAAGN,WAE/E,OACA,6BACIG,ICGUK,EAVG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACpB,OACC,6BACC,2BAAOd,UAAU,uCAAuCe,KAAK,SAC7DC,YAAY,gBAAgBC,SAAUH,MCK1BI,EATA,SAACnB,GACf,OACE,yBAAKoB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,iBAAkBC,OAAO,UAClEvB,EAAMwB,WCgBIC,E,kDAnBd,WAAYzB,GAAQ,IAAD,8BAClB,cAAMA,IACD0B,MAAQ,CACZC,UAAU,GAHO,E,8DAODC,EAAOC,GACxBC,KAAKC,SAAU,CAAEJ,UAAU,M,+BAI3B,OAAIG,KAAKJ,MAAMC,SACP,wDAEAG,KAAK9B,MAAMwB,a,GAhBMQ,aCiDZC,G,wDA1Cd,aAAe,IAAD,8BACb,gBAaDC,eAAiB,SAACC,GACjB,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAbzC,EAAKZ,MAAQ,CACZlB,OAAQ,GACR4B,YAAa,IAJD,E,gEAQQ,IAAD,OACpBG,MAAM,8CACJC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAAEvB,OAAQmC,S,+BAO/B,IAAD,EACwBb,KAAKJ,MAA7BlB,EADA,EACAA,OAAQ4B,EADR,EACQA,YACVQ,EAAiBpC,EAAOqC,QAAO,SAAArC,GACpC,OAAOA,EAAOH,KAAKyC,cAAcC,SAASX,EAAYU,kBAEtD,OAAsB,IAAlBtC,EAAOwC,OACH,2CAGR,yBAAK/C,UAAU,MACd,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACC,kBAACe,EAAD,KACC,kBAAC,EAAD,CAAUzC,OAAQoC,W,GAjCNZ,cCIEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAArC,GACLsC,QAAQtC,MAAMA,EAAMuC,c","file":"static/js/main.9c682bfb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Card.css';\r\n\r\nconst Card = (props) => {\r\n\t\treturn (\r\n\t\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t\t\t<img alt=\"robots\" src={`https://robohash.org/${props.id}?200x200`}/>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2>{props.name}</h2>\r\n\t\t\t\t\t<p>{props.email}</p>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\r\n\t\t\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\r\n\t})\r\n\treturn (\r\n\t<div>\r\n  \t\t{cardComponent}\r\n  \t</div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<input className='pa3 ba br4 b--green bg-lightest-blue' type='search' \r\n\t\t\tplaceholder='search robots' onChange={searchChange} />\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t\t<div style={{ overflowY: 'Scroll', border: '5px dash black', height:'800px'}}>\r\n\t\t\t\t{props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBondary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\t\t\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState ({ hasError: true })\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>Oooops. That is not good</h1>\r\n\t\t}\r\n\t\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBondary;","import React, { Component } from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport ErrorBoundary from './ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount () {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ robots: users }));\r\n\t\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t}\r\n\t\t\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state;\r\n\t\tconst filterCardList = robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\tif (robots.length === 0) {\r\n\t\t\t\treturn <h1>Please Wait</h1>\r\n\t\t\t} else {\r\n\t\treturn (\r\n\t\t\t<div className=\"tc\">\r\n\t\t\t\t<h1 className=\"f1\">Robofriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filterCardList}/>\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n \t}\r\n}\r\n\t\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}